h3 Keyzi.io demonstration application
p This is a simple blogging application that implements keyzi.io for encryption/decryption
p add the following lines to your gemfile
pre gem 'keyziio', github: "safenetlabs/ruby-keyziio-agent"
    gem 'keyziio_client', github: "safenetlabs/ruby-keyziio-client"
p The posts model only stores the encrypted content - and model callbacks are implemented to encrypt and decrypt content
  In order to configure the application you should add your keyzi.io token to secrets.yml
  and create an instance of the agent that communicates with the keyzi.io server in an initializer - for example keyziio_agent.rb
pre module KeyziioAgent
      @kza = Keyziio::Agent.new(Rails.application.secrets.keyziio_id)
      def self.kza
        @kza
      end
    end

p The user model implements call back :after_create to setup user's keychain on the Keyziio server. On create and each sign in,
  the user's keychain key parts are request from Keyziio Agent running on the ASP's app server and the Keyziio server. The two keyparts are
  joined to construct the user's keychain key and store it in a memory cache. This cached key is used to unwrap data keys during encrypt and decrypt operations.
  The key is stored only for the current session and purged from the cache on sign out.

p In the posts model we implement call backs :before_save and :after_find to handle the encryption and decryption
pre before_save :encrypt
    def encrypt
      keychain_key = KeyziioCache.cache.read(self.user.keychain_id)
      kz_user = KZClient.new(self.user.keychain_id, self.user.access_token, Base64.decode64(keychain_key))
      self.content = kz_user.encrypt_buffer(content, self.title + '_key')
    end
pre after_find :decrypt
    def decrypt
      self.encrypted_content = content
      # Get the keychain key from the memory cache
      keychain_key = KeyziioCache.cache.read(self.user.keychain_id)
      kz_user = KZClient.new(self.user.keychain_id, self.user.access_token, Base64.decode64(keychain_key))
      self.content = kz_user.decrypt_buffer(content) if kz_user
    end
p You can get the two gem files from here
=link_to 'safenet labs repository', safenet_labs_repository_url
